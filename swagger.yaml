openapi: 3.0.1
info:
  title: "dev-recruitment-task-ts-aws-dynamodb-api"
  description: This is recruitment task for SAGACA. It is built using a serverless architecture, leveraging AWS Lambda functions and API Gateway to handle incoming requests and responses. The API is developed using Node.js and TypeScript, providing strong typing and enhancing code readability and maintainability. Data validation is implemented using Zod, a powerful runtime type checking library, to ensure data integrity and prevent invalid requests from reaching the database.
  contact:
    url: https://www.linkedin.com/in/kacper-roob-robak/
  version: 1.0.0
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
- url: "https://7lazn7buef.execute-api.eu-central-1.amazonaws.com/dev"

tags: 
  - name: products
    description: Access to product inventory
paths:
  /products/{productId}:
    get:
      tags:
        - products
      summary: Find single product by ID
      description: Returns a single product
      parameters:
      - name: "productId"
        in: "path"
        description: ID of product to return
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
          
    put:
      tags:
        - products
      summary: Modify product
      description: Modify product properties
      parameters:
        - name: productId
          in: path
          description: id of existing product
          required: true
          schema:
            type: string
      requestBody:
        description: Modify existing product
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    delete:
      tags:
        - products
      summary: Delete product
      description: This action cannot be undone
      parameters:
        - name: productId
          in: path
          description: id of existing product
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product removed
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /products:
    post:
      tags:
        - products
      summary: Add product
      description: Add new product
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    get:
      tags:
        - products
      summary: Get all product from the table
      description: Returns all products from table
      responses:
        '200':
          description: successful operation
          
components:
  schemas:
    Product:
      required:
        - name
        - description
        - price
        - available
      type: object
      properties:
        name:
          type: string
          example: iPhone
        description:
          type: string
          example: Expensive phone
        price:
          type: integer
          format: int64
        available:
          type: boolean